
Trafiic Light Sign - TLS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000706  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000077a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  0000077a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f89  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000813  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7b  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eeb  00000000  00000000  00003770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000465b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_4>
  14:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_5>
  18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_6>
  1c:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_7>
  20:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_8>
  24:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_9>
  28:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_10>
  2c:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 37       	cpi	r26, 0x76	; 118
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
  74:	0c 94 81 03 	jmp	0x702	; 0x702 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinDirection>:
		Local_u8ErrorState = NOK;
		return Local_u8ErrorState;
	}
	
	return Local_u8ErrorState;
}
  7c:	68 30       	cpi	r22, 0x08	; 8
  7e:	08 f0       	brcs	.+2      	; 0x82 <DIO_u8SetPinDirection+0x6>
  80:	78 c0       	rjmp	.+240    	; 0x172 <DIO_u8SetPinDirection+0xf6>
  82:	41 30       	cpi	r20, 0x01	; 1
  84:	c1 f5       	brne	.+112    	; 0xf6 <DIO_u8SetPinDirection+0x7a>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	91 f0       	breq	.+36     	; 0xae <DIO_u8SetPinDirection+0x32>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_u8SetPinDirection+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	d9 f0       	breq	.+54     	; 0xc6 <DIO_u8SetPinDirection+0x4a>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	29 f1       	breq	.+74     	; 0xde <DIO_u8SetPinDirection+0x62>
  94:	70 c0       	rjmp	.+224    	; 0x176 <DIO_u8SetPinDirection+0xfa>
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_u8SetPinDirection+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_u8SetPinDirection+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_u8SetPinDirection+0x3e>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_u8SetPinDirection+0x3a>
  be:	82 2b       	or	r24, r18
  c0:	87 bb       	out	0x17, r24	; 23
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	08 95       	ret
  c6:	24 b3       	in	r18, 0x14	; 20
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_u8SetPinDirection+0x56>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_u8SetPinDirection+0x52>
  d6:	82 2b       	or	r24, r18
  d8:	84 bb       	out	0x14, r24	; 20
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	08 95       	ret
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_u8SetPinDirection+0x6e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_u8SetPinDirection+0x6a>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 95       	ret
  f6:	41 11       	cpse	r20, r1
  f8:	40 c0       	rjmp	.+128    	; 0x17a <DIO_u8SetPinDirection+0xfe>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	99 f0       	breq	.+38     	; 0x124 <DIO_u8SetPinDirection+0xa8>
  fe:	28 f0       	brcs	.+10     	; 0x10a <DIO_u8SetPinDirection+0x8e>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	e9 f0       	breq	.+58     	; 0x13e <DIO_u8SetPinDirection+0xc2>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	41 f1       	breq	.+80     	; 0x158 <DIO_u8SetPinDirection+0xdc>
 108:	3a c0       	rjmp	.+116    	; 0x17e <DIO_u8SetPinDirection+0x102>
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_u8SetPinDirection+0x9a>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_u8SetPinDirection+0x96>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinDirection+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinDirection+0xb0>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	87 bb       	out	0x17, r24	; 23
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret
 13e:	24 b3       	in	r18, 0x14	; 20
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_u8SetPinDirection+0xce>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_u8SetPinDirection+0xca>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	84 bb       	out	0x14, r24	; 20
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret
 158:	21 b3       	in	r18, 0x11	; 17
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_u8SetPinDirection+0xe8>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_u8SetPinDirection+0xe4>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	81 bb       	out	0x11, r24	; 17
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	08 95       	ret
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	08 95       	ret
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	08 95       	ret
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	08 95       	ret

00000182 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 copy_u8PinValue)
{
	
	u8 Local_u8ErrorState = OK ;

	if(copy_u8PinNumber >= DIO_PIN0 && copy_u8PinNumber <= DIO_PIN7 )
 182:	68 30       	cpi	r22, 0x08	; 8
 184:	08 f0       	brcs	.+2      	; 0x188 <DIO_u8SetPinValue+0x6>
 186:	78 c0       	rjmp	.+240    	; 0x278 <DIO_u8SetPinValue+0xf6>
	{
		if(copy_u8PinValue == DIO_PIN_HIGH)
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	c1 f5       	brne	.+112    	; 0x1fc <DIO_u8SetPinValue+0x7a>
		{
			switch(copy_u8Port)
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	91 f0       	breq	.+36     	; 0x1b4 <DIO_u8SetPinValue+0x32>
 190:	28 f0       	brcs	.+10     	; 0x19c <DIO_u8SetPinValue+0x1a>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	d9 f0       	breq	.+54     	; 0x1cc <DIO_u8SetPinValue+0x4a>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	29 f1       	breq	.+74     	; 0x1e4 <DIO_u8SetPinValue+0x62>
 19a:	70 c0       	rjmp	.+224    	; 0x27c <DIO_u8SetPinValue+0xfa>
			{
				case DIO_PORTA:  SET_BIT(PORTA, copy_u8PinNumber);  break;
 19c:	2b b3       	in	r18, 0x1b	; 27
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_u8SetPinValue+0x26>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_u8SetPinValue+0x22>
 1ac:	82 2b       	or	r24, r18
 1ae:	8b bb       	out	0x1b, r24	; 27
}

u8 DIO_u8SetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 copy_u8PinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(copy_u8PinValue == DIO_PIN_HIGH)
		{
			switch(copy_u8Port)
			{
				case DIO_PORTA:  SET_BIT(PORTA, copy_u8PinNumber);  break;
 1b2:	08 95       	ret
				case DIO_PORTB:  SET_BIT(PORTB, copy_u8PinNumber);  break;
 1b4:	28 b3       	in	r18, 0x18	; 24
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_u8SetPinValue+0x3e>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_u8SetPinValue+0x3a>
 1c4:	82 2b       	or	r24, r18
 1c6:	88 bb       	out	0x18, r24	; 24
}

u8 DIO_u8SetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 copy_u8PinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
		if(copy_u8PinValue == DIO_PIN_HIGH)
		{
			switch(copy_u8Port)
			{
				case DIO_PORTA:  SET_BIT(PORTA, copy_u8PinNumber);  break;
				case DIO_PORTB:  SET_BIT(PORTB, copy_u8PinNumber);  break;
 1ca:	08 95       	ret
				case DIO_PORTC:  SET_BIT(PORTC, copy_u8PinNumber);  break;
 1cc:	25 b3       	in	r18, 0x15	; 21
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_u8SetPinValue+0x56>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_u8SetPinValue+0x52>
 1dc:	82 2b       	or	r24, r18
 1de:	85 bb       	out	0x15, r24	; 21
}

u8 DIO_u8SetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 copy_u8PinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(copy_u8Port)
			{
				case DIO_PORTA:  SET_BIT(PORTA, copy_u8PinNumber);  break;
				case DIO_PORTB:  SET_BIT(PORTB, copy_u8PinNumber);  break;
				case DIO_PORTC:  SET_BIT(PORTC, copy_u8PinNumber);  break;
 1e2:	08 95       	ret
				case DIO_PORTD:  SET_BIT(PORTD, copy_u8PinNumber);  break;
 1e4:	22 b3       	in	r18, 0x12	; 18
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8SetPinValue+0x6e>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8SetPinValue+0x6a>
 1f4:	82 2b       	or	r24, r18
 1f6:	82 bb       	out	0x12, r24	; 18
}

u8 DIO_u8SetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 copy_u8PinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
			switch(copy_u8Port)
			{
				case DIO_PORTA:  SET_BIT(PORTA, copy_u8PinNumber);  break;
				case DIO_PORTB:  SET_BIT(PORTB, copy_u8PinNumber);  break;
				case DIO_PORTC:  SET_BIT(PORTC, copy_u8PinNumber);  break;
				case DIO_PORTD:  SET_BIT(PORTD, copy_u8PinNumber);  break;
 1fa:	08 95       	ret
				default: Local_u8ErrorState = NOK ;
			}
			
		}
		else if(copy_u8PinValue == DIO_PIN_LOW)
 1fc:	41 11       	cpse	r20, r1
 1fe:	40 c0       	rjmp	.+128    	; 0x280 <DIO_u8SetPinValue+0xfe>
		{
			switch(copy_u8Port)
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	99 f0       	breq	.+38     	; 0x22a <DIO_u8SetPinValue+0xa8>
 204:	28 f0       	brcs	.+10     	; 0x210 <DIO_u8SetPinValue+0x8e>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	e9 f0       	breq	.+58     	; 0x244 <DIO_u8SetPinValue+0xc2>
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	41 f1       	breq	.+80     	; 0x25e <DIO_u8SetPinValue+0xdc>
 20e:	3a c0       	rjmp	.+116    	; 0x284 <DIO_u8SetPinValue+0x102>
			{
				case DIO_PORTA:  CLR_BIT(PORTA, copy_u8PinNumber);  break;
 210:	2b b3       	in	r18, 0x1b	; 27
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_u8SetPinValue+0x9a>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_u8SetPinValue+0x96>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	8b bb       	out	0x1b, r24	; 27
}

u8 DIO_u8SetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 copy_u8PinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 226:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(copy_u8PinValue == DIO_PIN_LOW)
		{
			switch(copy_u8Port)
			{
				case DIO_PORTA:  CLR_BIT(PORTA, copy_u8PinNumber);  break;
 228:	08 95       	ret
				case DIO_PORTB:  CLR_BIT(PORTB, copy_u8PinNumber);  break;
 22a:	28 b3       	in	r18, 0x18	; 24
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_u8SetPinValue+0xb4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_u8SetPinValue+0xb0>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	88 bb       	out	0x18, r24	; 24
}

u8 DIO_u8SetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 copy_u8PinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 240:	80 e0       	ldi	r24, 0x00	; 0
		else if(copy_u8PinValue == DIO_PIN_LOW)
		{
			switch(copy_u8Port)
			{
				case DIO_PORTA:  CLR_BIT(PORTA, copy_u8PinNumber);  break;
				case DIO_PORTB:  CLR_BIT(PORTB, copy_u8PinNumber);  break;
 242:	08 95       	ret
				case DIO_PORTC:  CLR_BIT(PORTC, copy_u8PinNumber);  break;
 244:	25 b3       	in	r18, 0x15	; 21
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_u8SetPinValue+0xce>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_u8SetPinValue+0xca>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	85 bb       	out	0x15, r24	; 21
}

u8 DIO_u8SetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 copy_u8PinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 25a:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(copy_u8Port)
			{
				case DIO_PORTA:  CLR_BIT(PORTA, copy_u8PinNumber);  break;
				case DIO_PORTB:  CLR_BIT(PORTB, copy_u8PinNumber);  break;
				case DIO_PORTC:  CLR_BIT(PORTC, copy_u8PinNumber);  break;
 25c:	08 95       	ret
				case DIO_PORTD:  CLR_BIT(PORTD, copy_u8PinNumber);  break;
 25e:	22 b3       	in	r18, 0x12	; 18
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_u8SetPinValue+0xe8>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_u8SetPinValue+0xe4>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	82 bb       	out	0x12, r24	; 18
}

u8 DIO_u8SetPinValue(u8 copy_u8Port, u8 copy_u8PinNumber, u8 copy_u8PinValue)
{
	
	u8 Local_u8ErrorState = OK ;
 274:	80 e0       	ldi	r24, 0x00	; 0
			switch(copy_u8Port)
			{
				case DIO_PORTA:  CLR_BIT(PORTA, copy_u8PinNumber);  break;
				case DIO_PORTB:  CLR_BIT(PORTB, copy_u8PinNumber);  break;
				case DIO_PORTC:  CLR_BIT(PORTC, copy_u8PinNumber);  break;
				case DIO_PORTD:  CLR_BIT(PORTD, copy_u8PinNumber);  break;
 276:	08 95       	ret
			return Local_u8ErrorState;
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	08 95       	ret
			{
				case DIO_PORTA:  SET_BIT(PORTA, copy_u8PinNumber);  break;
				case DIO_PORTB:  SET_BIT(PORTB, copy_u8PinNumber);  break;
				case DIO_PORTC:  SET_BIT(PORTC, copy_u8PinNumber);  break;
				case DIO_PORTD:  SET_BIT(PORTD, copy_u8PinNumber);  break;
				default: Local_u8ErrorState = NOK ;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	08 95       	ret
		}
		
		else
		{
			Local_u8ErrorState = NOK;
			return Local_u8ErrorState;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	08 95       	ret
			{
				case DIO_PORTA:  CLR_BIT(PORTA, copy_u8PinNumber);  break;
				case DIO_PORTB:  CLR_BIT(PORTB, copy_u8PinNumber);  break;
				case DIO_PORTC:  CLR_BIT(PORTC, copy_u8PinNumber);  break;
				case DIO_PORTD:  CLR_BIT(PORTD, copy_u8PinNumber);  break;
				default: Local_u8ErrorState = NOK ;
 284:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState = NOK;
	}
	
	return Local_u8ErrorState;
}
 286:	08 95       	ret

00000288 <GIE_Enable>:
#include "GIE_config.h"
#include "GIE_interface.h"

void GIE_Enable(void)
{
	SET_BIT(GIE_SREG, I);
 288:	8f b7       	in	r24, 0x3f	; 63
 28a:	80 68       	ori	r24, 0x80	; 128
 28c:	8f bf       	out	0x3f, r24	; 63
 28e:	08 95       	ret

00000290 <LED_u8LedOn>:
/* Implementation */
u8 LED_u8LedOn(u8 copy_u8Port, u8 copy_u8PinNumber)
{
	u8 Local_u8ErrorState = OK;
	
	DIO_u8SetPinValue(copy_u8Port, copy_u8PinNumber, CONNECTION);
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_u8SetPinValue>
	
	return Local_u8ErrorState;
}
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret

0000029a <LED_u8LedOff>:

u8 LED_u8LedOff(u8 copy_u8Port, u8 copy_u8PinNumber)
{
	u8 Local_u8ErrorState = OK;
	
	DIO_u8SetPinValue(copy_u8Port, copy_u8PinNumber, ((CONNECTION) ^ 1));
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_u8SetPinValue>
	
	return Local_u8ErrorState;
}
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	08 95       	ret

000002a4 <Timer1_CTC1A_APP>:
{
	static u32 local_u32Counter = 0;
	static u8 local_u8Counter = 0;
	static u8 local_u8Color = 0;	// 0 = RED, 1 = YELLOW , 2 = GREEN
	
	local_u32Counter++;
 2a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_u32Counter.1628>
 2a8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <local_u32Counter.1628+0x1>
 2ac:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <local_u32Counter.1628+0x2>
 2b0:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <local_u32Counter.1628+0x3>
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	a1 1d       	adc	r26, r1
 2b8:	b1 1d       	adc	r27, r1
 2ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_u32Counter.1628>
 2be:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <local_u32Counter.1628+0x1>
 2c2:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <local_u32Counter.1628+0x2>
 2c6:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <local_u32Counter.1628+0x3>
	
	if (local_u32Counter == 1000)
 2ca:	88 3e       	cpi	r24, 0xE8	; 232
 2cc:	93 40       	sbci	r25, 0x03	; 3
 2ce:	a1 05       	cpc	r26, r1
 2d0:	b1 05       	cpc	r27, r1
 2d2:	69 f4       	brne	.+26     	; 0x2ee <Timer1_CTC1A_APP+0x4a>
	{
		local_u8Counter++;
 2d4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_u8Counter.1629>
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_u8Counter.1629>
		local_u32Counter = 0;
 2de:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <local_u32Counter.1628>
 2e2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <local_u32Counter.1628+0x1>
 2e6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <local_u32Counter.1628+0x2>
 2ea:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <local_u32Counter.1628+0x3>
	}
	
	if ((local_u8Counter == 2) && (local_u8Color == 0))
 2ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_u8Counter.1629>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	b1 f4       	brne	.+44     	; 0x322 <Timer1_CTC1A_APP+0x7e>
 2f6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2fa:	91 11       	cpse	r25, r1
 2fc:	12 c0       	rjmp	.+36     	; 0x322 <Timer1_CTC1A_APP+0x7e>
	{
		local_u8Color++;
 2fe:	9f 5f       	subi	r25, 0xFF	; 255
 300:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>

		LED_u8LedOff(DIO_PORTB, DIO_PIN0);		// Turn off RED
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_u8LedOff>
		LED_u8LedOn(DIO_PORTB, DIO_PIN1);		// Turn on YELLOW
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 48 01 	call	0x290	; 0x290 <LED_u8LedOn>
		LED_u8LedOff(DIO_PORTB, DIO_PIN2);		// Turn off GREEN
 314:	62 e0       	ldi	r22, 0x02	; 2
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_u8LedOff>
		local_u8Counter = 0;
 31c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <local_u8Counter.1629>
 320:	08 95       	ret
	}
	else if ((local_u8Counter == 1) && (local_u8Color == 1))
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	a9 f4       	brne	.+42     	; 0x350 <Timer1_CTC1A_APP+0xac>
 326:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 32a:	91 30       	cpi	r25, 0x01	; 1
 32c:	89 f4       	brne	.+34     	; 0x350 <Timer1_CTC1A_APP+0xac>
	{
		local_u8Color++;
 32e:	9f 5f       	subi	r25, 0xFF	; 255
 330:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		LED_u8LedOff(DIO_PORTB, DIO_PIN0);		// Turn off RED
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_u8LedOff>
		LED_u8LedOff(DIO_PORTB, DIO_PIN1);		// Turn off YELLOW
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_u8LedOff>
		LED_u8LedOn(DIO_PORTB, DIO_PIN2);		// Turn on GREEN
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 48 01 	call	0x290	; 0x290 <LED_u8LedOn>
		local_u8Counter = 0;
 34a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <local_u8Counter.1629>
 34e:	08 95       	ret
	}
	else if ((local_u8Counter == 2) && (local_u8Color == 2))
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	a1 f4       	brne	.+40     	; 0x37c <Timer1_CTC1A_APP+0xd8>
 354:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 358:	82 30       	cpi	r24, 0x02	; 2
 35a:	81 f4       	brne	.+32     	; 0x37c <Timer1_CTC1A_APP+0xd8>
	{
		local_u8Color = 0;
 35c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

		LED_u8LedOn(DIO_PORTB, DIO_PIN0);		// Turn on RED
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 48 01 	call	0x290	; 0x290 <LED_u8LedOn>
		LED_u8LedOff(DIO_PORTB, DIO_PIN1);		// Turn off YELLOW
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_u8LedOff>
		LED_u8LedOff(DIO_PORTB, DIO_PIN2);		// Turn off GREEN
 370:	62 e0       	ldi	r22, 0x02	; 2
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_u8LedOff>
		local_u8Counter = 0;
 378:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <local_u8Counter.1629>
 37c:	08 95       	ret

0000037e <main>:


int main(void)
{
    /* LED directons : 3 Outputs*/
	DIO_u8SetPinDirection(DIO_PORTB, DIO_PIN0, DIO_PIN_OUTPUT);		// RED
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTB, DIO_PIN1, DIO_PIN_OUTPUT);		// YELLOW
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT);		// GREEN
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinDirection>
	
	DIO_u8SetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);		// GREEN
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	65 e0       	ldi	r22, 0x05	; 5
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinDirection>
	
	LED_u8LedOn(DIO_PORTB, DIO_PIN0);		// Light RED first
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 48 01 	call	0x290	; 0x290 <LED_u8LedOn>
	
	TIMER1_voidInit();
 3ae:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <TIMER1_voidInit>

	TIMERS_u8CallBackFunction(Timer1_CTC1A_APP, CTC1A);
 3b2:	68 e2       	ldi	r22, 0x28	; 40
 3b4:	82 e5       	ldi	r24, 0x52	; 82
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 00 02 	call	0x400	; 0x400 <TIMERS_u8CallBackFunction>
	GIE_Enable();
 3bc:	0e 94 44 01 	call	0x288	; 0x288 <GIE_Enable>
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <main+0x42>

000003c2 <TIMER1_voidInit>:
	CLR_BIT(TIMERS_TCCR1B, TCCR1B_WGM12);
	CLR_BIT(TIMERS_TCCR1B, TCCR1B_WGM13);
	
	#elif TIMER1_WAVE_GEN_MODE == TIMER1_CTC
	/* WGM */
	CLR_BIT(TIMERS_TCCR1A, TCCR1A_WGM10);
 3c2:	8f b5       	in	r24, 0x2f	; 47
 3c4:	8e 7f       	andi	r24, 0xFE	; 254
 3c6:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TIMERS_TCCR1A, TCCR1A_WGM11);
 3c8:	8f b5       	in	r24, 0x2f	; 47
 3ca:	8d 7f       	andi	r24, 0xFD	; 253
 3cc:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TIMERS_TCCR1B, TCCR1B_WGM12);
 3ce:	8e b5       	in	r24, 0x2e	; 46
 3d0:	88 60       	ori	r24, 0x08	; 8
 3d2:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TIMERS_TCCR1B, TCCR1B_WGM13);
 3d4:	8e b5       	in	r24, 0x2e	; 46
 3d6:	8f 7e       	andi	r24, 0xEF	; 239
 3d8:	8e bd       	out	0x2e, r24	; 46
	
	TIMERS_OCR1AL = TIMER1_COMPARE_VALUE;	// Setting Compare Match Value of A
 3da:	80 e1       	ldi	r24, 0x10	; 16
 3dc:	8a bd       	out	0x2a, r24	; 42
	TIMERS_OCR1BDATA = TIMER1_COMPARE_VALUE;	// Setting Compare Match Value of B
 3de:	80 e1       	ldi	r24, 0x10	; 16
 3e0:	97 e2       	ldi	r25, 0x27	; 39
 3e2:	9a bd       	out	0x2a, r25	; 42
 3e4:	89 bd       	out	0x29, r24	; 41
	
	SET_BIT(TIMERS_TIMSK, TIMSK_OCIE1A);	// Enables Compare Match on A
 3e6:	89 b7       	in	r24, 0x39	; 57
 3e8:	80 61       	ori	r24, 0x10	; 16
 3ea:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TIMERS_TIMSK, TIMSK_OCIE1B);	// Enables Compare Match on B
 3ec:	89 b7       	in	r24, 0x39	; 57
 3ee:	88 60       	ori	r24, 0x08	; 8
 3f0:	89 bf       	out	0x39, r24	; 57
	#error "WGM_CONFIG_FILE"
	
#endif

	/* Pre-Scaler */
	TIMERS_TCCR1B &= 0b11111000;		// Clearing Pre-Scaler Bits
 3f2:	8e b5       	in	r24, 0x2e	; 46
 3f4:	88 7f       	andi	r24, 0xF8	; 248
 3f6:	8e bd       	out	0x2e, r24	; 46
	TIMERS_TCCR1B |= TIMER1_PRESCALER;
 3f8:	8e b5       	in	r24, 0x2e	; 46
 3fa:	85 60       	ori	r24, 0x05	; 5
 3fc:	8e bd       	out	0x2e, r24	; 46
 3fe:	08 95       	ret

00000400 <TIMERS_u8CallBackFunction>:

u8 TIMERS_u8CallBackFunction(void(*copy_ptrFunction)(void), u8 copy_ptrNum)
{
	u8 Error_u8State = OK;
	
	if (copy_ptrNum == CTC2)
 400:	6a 30       	cpi	r22, 0x0A	; 10
 402:	29 f4       	brne	.+10     	; 0x40e <TIMERS_u8CallBackFunction+0xe>
	{
		TIMER2_CTC_ptrFunction = copy_ptrFunction;
 404:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <TIMER2_CTC_ptrFunction+0x1>
 408:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <TIMER2_CTC_ptrFunction>
 40c:	30 c0       	rjmp	.+96     	; 0x46e <TIMERS_u8CallBackFunction+0x6e>
	}	
	else if (copy_ptrNum == OVF2)
 40e:	64 31       	cpi	r22, 0x14	; 20
 410:	29 f4       	brne	.+10     	; 0x41c <TIMERS_u8CallBackFunction+0x1c>
	{
		TIMER2_OVF_ptrFunction = copy_ptrFunction;	 
 412:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <TIMER2_OVF_ptrFunction+0x1>
 416:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <TIMER2_OVF_ptrFunction>
 41a:	29 c0       	rjmp	.+82     	; 0x46e <TIMERS_u8CallBackFunction+0x6e>
	}
	else if (copy_ptrNum == ICU1)
 41c:	6e 31       	cpi	r22, 0x1E	; 30
 41e:	29 f4       	brne	.+10     	; 0x42a <TIMERS_u8CallBackFunction+0x2a>
	{
		TIMER1_ICU_ptrFunction = copy_ptrFunction;
 420:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <TIMER1_ICU_ptrFunction+0x1>
 424:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <TIMER1_ICU_ptrFunction>
 428:	22 c0       	rjmp	.+68     	; 0x46e <TIMERS_u8CallBackFunction+0x6e>
	}
	else if (copy_ptrNum == CTC1A)
 42a:	68 32       	cpi	r22, 0x28	; 40
 42c:	29 f4       	brne	.+10     	; 0x438 <TIMERS_u8CallBackFunction+0x38>
	{
		TIMER1A_CTC_ptrFunction = copy_ptrFunction;	
 42e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <TIMER1A_CTC_ptrFunction+0x1>
 432:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <TIMER1A_CTC_ptrFunction>
 436:	1b c0       	rjmp	.+54     	; 0x46e <TIMERS_u8CallBackFunction+0x6e>
	}
	else if (copy_ptrNum == CTC1B)
 438:	62 33       	cpi	r22, 0x32	; 50
 43a:	29 f4       	brne	.+10     	; 0x446 <TIMERS_u8CallBackFunction+0x46>
	{
		TIMER1B_CTC_ptrFunction = copy_ptrFunction;
 43c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <TIMER1B_CTC_ptrFunction+0x1>
 440:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <TIMER1B_CTC_ptrFunction>
 444:	14 c0       	rjmp	.+40     	; 0x46e <TIMERS_u8CallBackFunction+0x6e>
	}
	else if (copy_ptrNum == OVF1)
 446:	6c 33       	cpi	r22, 0x3C	; 60
 448:	29 f4       	brne	.+10     	; 0x454 <TIMERS_u8CallBackFunction+0x54>
	{
		TIMER1_OVF_ptrFunction = copy_ptrFunction;
 44a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <TIMER1_OVF_ptrFunction+0x1>
 44e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <TIMER1_OVF_ptrFunction>
 452:	0d c0       	rjmp	.+26     	; 0x46e <TIMERS_u8CallBackFunction+0x6e>
	}
	else if (copy_ptrNum == CTC0)
 454:	66 34       	cpi	r22, 0x46	; 70
 456:	29 f4       	brne	.+10     	; 0x462 <TIMERS_u8CallBackFunction+0x62>
	{
		TIMER0_CTC_ptrFunction = copy_ptrFunction;
 458:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <TIMER0_CTC_ptrFunction+0x1>
 45c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <TIMER0_CTC_ptrFunction>
 460:	06 c0       	rjmp	.+12     	; 0x46e <TIMERS_u8CallBackFunction+0x6e>
	}
	else if (copy_ptrNum == OVF0)
 462:	60 35       	cpi	r22, 0x50	; 80
 464:	21 f4       	brne	.+8      	; 0x46e <TIMERS_u8CallBackFunction+0x6e>
	{
		TIMER0_OVF_ptrFunction = copy_ptrFunction;
 466:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <TIMER0_OVF_ptrFunction+0x1>
 46a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <TIMER0_OVF_ptrFunction>
	}
	
	return Error_u8State;
}
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	08 95       	ret

00000472 <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void)	// Timer/Counter2 Compare Match
{
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	2f 93       	push	r18
 47e:	3f 93       	push	r19
 480:	4f 93       	push	r20
 482:	5f 93       	push	r21
 484:	6f 93       	push	r22
 486:	7f 93       	push	r23
 488:	8f 93       	push	r24
 48a:	9f 93       	push	r25
 48c:	af 93       	push	r26
 48e:	bf 93       	push	r27
 490:	ef 93       	push	r30
 492:	ff 93       	push	r31
	if(TIMER2_CTC_ptrFunction != NULL)
 494:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <TIMER2_CTC_ptrFunction>
 498:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <TIMER2_CTC_ptrFunction+0x1>
 49c:	30 97       	sbiw	r30, 0x00	; 0
 49e:	09 f0       	breq	.+2      	; 0x4a2 <__vector_4+0x30>
	{
		TIMER2_CTC_ptrFunction();
 4a0:	09 95       	icall
	}
	else
	{}
}
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	bf 91       	pop	r27
 4a8:	af 91       	pop	r26
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	7f 91       	pop	r23
 4b0:	6f 91       	pop	r22
 4b2:	5f 91       	pop	r21
 4b4:	4f 91       	pop	r20
 4b6:	3f 91       	pop	r19
 4b8:	2f 91       	pop	r18
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__vector_5>:

void __vector_5(void) __attribute__((signal));
void __vector_5(void)	// Timer/Counter2 Overflow
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
	if(TIMER2_OVF_ptrFunction != NULL)
 4e6:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <TIMER2_OVF_ptrFunction>
 4ea:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <TIMER2_OVF_ptrFunction+0x1>
 4ee:	30 97       	sbiw	r30, 0x00	; 0
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <__vector_5+0x30>
	{
		TIMER2_OVF_ptrFunction();
 4f2:	09 95       	icall
	}
	else
	{}
}
 4f4:	ff 91       	pop	r31
 4f6:	ef 91       	pop	r30
 4f8:	bf 91       	pop	r27
 4fa:	af 91       	pop	r26
 4fc:	9f 91       	pop	r25
 4fe:	8f 91       	pop	r24
 500:	7f 91       	pop	r23
 502:	6f 91       	pop	r22
 504:	5f 91       	pop	r21
 506:	4f 91       	pop	r20
 508:	3f 91       	pop	r19
 50a:	2f 91       	pop	r18
 50c:	0f 90       	pop	r0
 50e:	0f be       	out	0x3f, r0	; 63
 510:	0f 90       	pop	r0
 512:	1f 90       	pop	r1
 514:	18 95       	reti

00000516 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)	// Timer/Counter1 Capture Event
{
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
 520:	2f 93       	push	r18
 522:	3f 93       	push	r19
 524:	4f 93       	push	r20
 526:	5f 93       	push	r21
 528:	6f 93       	push	r22
 52a:	7f 93       	push	r23
 52c:	8f 93       	push	r24
 52e:	9f 93       	push	r25
 530:	af 93       	push	r26
 532:	bf 93       	push	r27
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
	if(TIMER1_ICU_ptrFunction != NULL)
 538:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <TIMER1_ICU_ptrFunction>
 53c:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <TIMER1_ICU_ptrFunction+0x1>
 540:	30 97       	sbiw	r30, 0x00	; 0
 542:	09 f0       	breq	.+2      	; 0x546 <__vector_6+0x30>
	{
		TIMER1_ICU_ptrFunction();
 544:	09 95       	icall
	}
	else
	{}
}
 546:	ff 91       	pop	r31
 548:	ef 91       	pop	r30
 54a:	bf 91       	pop	r27
 54c:	af 91       	pop	r26
 54e:	9f 91       	pop	r25
 550:	8f 91       	pop	r24
 552:	7f 91       	pop	r23
 554:	6f 91       	pop	r22
 556:	5f 91       	pop	r21
 558:	4f 91       	pop	r20
 55a:	3f 91       	pop	r19
 55c:	2f 91       	pop	r18
 55e:	0f 90       	pop	r0
 560:	0f be       	out	0x3f, r0	; 63
 562:	0f 90       	pop	r0
 564:	1f 90       	pop	r1
 566:	18 95       	reti

00000568 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)	// Timer/Counter1 Compare Match A
{
 568:	1f 92       	push	r1
 56a:	0f 92       	push	r0
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	0f 92       	push	r0
 570:	11 24       	eor	r1, r1
 572:	2f 93       	push	r18
 574:	3f 93       	push	r19
 576:	4f 93       	push	r20
 578:	5f 93       	push	r21
 57a:	6f 93       	push	r22
 57c:	7f 93       	push	r23
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
 582:	af 93       	push	r26
 584:	bf 93       	push	r27
 586:	ef 93       	push	r30
 588:	ff 93       	push	r31
	if(TIMER1A_CTC_ptrFunction != NULL)
 58a:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <TIMER1A_CTC_ptrFunction>
 58e:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <TIMER1A_CTC_ptrFunction+0x1>
 592:	30 97       	sbiw	r30, 0x00	; 0
 594:	09 f0       	breq	.+2      	; 0x598 <__vector_7+0x30>
	{
		TIMER1A_CTC_ptrFunction();
 596:	09 95       	icall
	}
	else
	{}
}
 598:	ff 91       	pop	r31
 59a:	ef 91       	pop	r30
 59c:	bf 91       	pop	r27
 59e:	af 91       	pop	r26
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	7f 91       	pop	r23
 5a6:	6f 91       	pop	r22
 5a8:	5f 91       	pop	r21
 5aa:	4f 91       	pop	r20
 5ac:	3f 91       	pop	r19
 5ae:	2f 91       	pop	r18
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)	// Timer/Counter1 Compare Match B
{
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	2f 93       	push	r18
 5c6:	3f 93       	push	r19
 5c8:	4f 93       	push	r20
 5ca:	5f 93       	push	r21
 5cc:	6f 93       	push	r22
 5ce:	7f 93       	push	r23
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
 5d8:	ef 93       	push	r30
 5da:	ff 93       	push	r31
	if(TIMER1B_CTC_ptrFunction != NULL)
 5dc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <TIMER1B_CTC_ptrFunction>
 5e0:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <TIMER1B_CTC_ptrFunction+0x1>
 5e4:	30 97       	sbiw	r30, 0x00	; 0
 5e6:	09 f0       	breq	.+2      	; 0x5ea <__vector_8+0x30>
	{
		TIMER1B_CTC_ptrFunction();
 5e8:	09 95       	icall
	}
	else
	{}
}
 5ea:	ff 91       	pop	r31
 5ec:	ef 91       	pop	r30
 5ee:	bf 91       	pop	r27
 5f0:	af 91       	pop	r26
 5f2:	9f 91       	pop	r25
 5f4:	8f 91       	pop	r24
 5f6:	7f 91       	pop	r23
 5f8:	6f 91       	pop	r22
 5fa:	5f 91       	pop	r21
 5fc:	4f 91       	pop	r20
 5fe:	3f 91       	pop	r19
 600:	2f 91       	pop	r18
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)	// Timer/Counter1 Overflow
{
 60c:	1f 92       	push	r1
 60e:	0f 92       	push	r0
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	0f 92       	push	r0
 614:	11 24       	eor	r1, r1
 616:	2f 93       	push	r18
 618:	3f 93       	push	r19
 61a:	4f 93       	push	r20
 61c:	5f 93       	push	r21
 61e:	6f 93       	push	r22
 620:	7f 93       	push	r23
 622:	8f 93       	push	r24
 624:	9f 93       	push	r25
 626:	af 93       	push	r26
 628:	bf 93       	push	r27
 62a:	ef 93       	push	r30
 62c:	ff 93       	push	r31
	if(TIMER1_OVF_ptrFunction != NULL)
 62e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TIMER1_OVF_ptrFunction>
 632:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TIMER1_OVF_ptrFunction+0x1>
 636:	30 97       	sbiw	r30, 0x00	; 0
 638:	09 f0       	breq	.+2      	; 0x63c <__vector_9+0x30>
	{
		TIMER1_OVF_ptrFunction();
 63a:	09 95       	icall
	}
	else
	{}
	
}
 63c:	ff 91       	pop	r31
 63e:	ef 91       	pop	r30
 640:	bf 91       	pop	r27
 642:	af 91       	pop	r26
 644:	9f 91       	pop	r25
 646:	8f 91       	pop	r24
 648:	7f 91       	pop	r23
 64a:	6f 91       	pop	r22
 64c:	5f 91       	pop	r21
 64e:	4f 91       	pop	r20
 650:	3f 91       	pop	r19
 652:	2f 91       	pop	r18
 654:	0f 90       	pop	r0
 656:	0f be       	out	0x3f, r0	; 63
 658:	0f 90       	pop	r0
 65a:	1f 90       	pop	r1
 65c:	18 95       	reti

0000065e <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)	// Timer/Counter0 Compare Match
{
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	0f 92       	push	r0
 666:	11 24       	eor	r1, r1
 668:	2f 93       	push	r18
 66a:	3f 93       	push	r19
 66c:	4f 93       	push	r20
 66e:	5f 93       	push	r21
 670:	6f 93       	push	r22
 672:	7f 93       	push	r23
 674:	8f 93       	push	r24
 676:	9f 93       	push	r25
 678:	af 93       	push	r26
 67a:	bf 93       	push	r27
 67c:	ef 93       	push	r30
 67e:	ff 93       	push	r31
	if(TIMER0_CTC_ptrFunction != NULL)
 680:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TIMER0_CTC_ptrFunction>
 684:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TIMER0_CTC_ptrFunction+0x1>
 688:	30 97       	sbiw	r30, 0x00	; 0
 68a:	09 f0       	breq	.+2      	; 0x68e <__vector_10+0x30>
	{
		TIMER0_CTC_ptrFunction();
 68c:	09 95       	icall
	}
	else
	{}
}
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	7f 91       	pop	r23
 69c:	6f 91       	pop	r22
 69e:	5f 91       	pop	r21
 6a0:	4f 91       	pop	r20
 6a2:	3f 91       	pop	r19
 6a4:	2f 91       	pop	r18
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <__vector_11>:
	
void __vector_11(void) __attribute__((signal));
void __vector_11(void)	// Timer/Counter0 Overflow
{
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	2f 93       	push	r18
 6bc:	3f 93       	push	r19
 6be:	4f 93       	push	r20
 6c0:	5f 93       	push	r21
 6c2:	6f 93       	push	r22
 6c4:	7f 93       	push	r23
 6c6:	8f 93       	push	r24
 6c8:	9f 93       	push	r25
 6ca:	af 93       	push	r26
 6cc:	bf 93       	push	r27
 6ce:	ef 93       	push	r30
 6d0:	ff 93       	push	r31
	if(TIMER0_OVF_ptrFunction != NULL)
 6d2:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TIMER0_OVF_ptrFunction>
 6d6:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TIMER0_OVF_ptrFunction+0x1>
 6da:	30 97       	sbiw	r30, 0x00	; 0
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__vector_11+0x30>
	{
		TIMER0_OVF_ptrFunction();
 6de:	09 95       	icall
	}
	else
	{}
 6e0:	ff 91       	pop	r31
 6e2:	ef 91       	pop	r30
 6e4:	bf 91       	pop	r27
 6e6:	af 91       	pop	r26
 6e8:	9f 91       	pop	r25
 6ea:	8f 91       	pop	r24
 6ec:	7f 91       	pop	r23
 6ee:	6f 91       	pop	r22
 6f0:	5f 91       	pop	r21
 6f2:	4f 91       	pop	r20
 6f4:	3f 91       	pop	r19
 6f6:	2f 91       	pop	r18
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

00000702 <_exit>:
 702:	f8 94       	cli

00000704 <__stop_program>:
 704:	ff cf       	rjmp	.-2      	; 0x704 <__stop_program>
